provider "aws" {
  region = "us-east-1"
}

# VPC e Redes
resource "aws_vpc" "toshiro_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  
  tags = {
    Name = "toshiro-vpc"
  }
}

resource "aws_subnet" "public_a" {
  vpc_id                  = aws_vpc.toshiro_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true
  
  tags = {
    Name = "toshiro-public-a"
  }
}

resource "aws_subnet" "public_b" {
  vpc_id                  = aws_vpc.toshiro_vpc.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "us-east-1b"
  map_public_ip_on_launch = true
  
  tags = {
    Name = "toshiro-public-b"
  }
}

# Internet Gateway
resource "aws_internet_gateway" "toshiro_igw" {
  vpc_id = aws_vpc.toshiro_vpc.id
  
  tags = {
    Name = "toshiro-igw"
  }
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.toshiro_vpc.id
  
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.toshiro_igw.id
  }
  
  tags = {
    Name = "toshiro-public-rt"
  }
}

resource "aws_route_table_association" "public_a" {
  subnet_id      = aws_subnet.public_a.id
  route_table_id = aws_route_table.public.id
}

resource "aws_route_table_association" "public_b" {
  subnet_id      = aws_subnet.public_b.id
  route_table_id = aws_route_table.public.id
}

# Grupo de Segurança
resource "aws_security_group" "toshiro_sg" {
  name        = "toshiro-sg"
  description = "Allow inbound traffic for Toshiro application"
  vpc_id      = aws_vpc.toshiro_vpc.id
  
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name = "toshiro-sg"
  }
}

# ECS Cluster
resource "aws_ecs_cluster" "toshiro_cluster" {
  name = "toshiro-cluster"
  
  setting {
    name  = "containerInsights"
    value = "enabled"
  }
}

# IAM Role para ECS Task Execution
resource "aws_iam_role" "ecs_task_execution_role" {
  name = "toshiro-ecs-task-execution-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "ecs_task_execution_role_policy" {
  role       = aws_iam_role.ecs_task_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

# RDS MySQL
resource "aws_db_subnet_group" "toshiro_db_subnet_group" {
  name       = "toshiro-db-subnet-group"
  subnet_ids = [aws_subnet.public_a.id, aws_subnet.public_b.id]
  
  tags = {
    Name = "Toshiro DB Subnet Group"
  }
}

resource "aws_security_group" "toshiro_db_sg" {
  name        = "toshiro-db-sg"
  description = "Allow incoming database connections"
  vpc_id      = aws_vpc.toshiro_vpc.id
  
  ingress {
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = [aws_security_group.toshiro_sg.id]
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name = "toshiro-db-sg"
  }
}

resource "aws_db_instance" "toshiro_db" {
  allocated_storage      = 20
  storage_type           = "gp2"
  engine                 = "mysql"
  engine_version         = "8.0"
  instance_class         = "db.t3.micro"
  db_name                = "toshirodb"
  username               = "toshiro_admin"
  password               = "change_me_in_production"
  parameter_group_name   = "default.mysql8.0"
  db_subnet_group_name   = aws_db_subnet_group.toshiro_db_subnet_group.name
  vpc_security_group_ids = [aws_security_group.toshiro_db_sg.id]
  skip_final_snapshot    = true
  
  tags = {
    Name = "toshiro-db"
  }
}

# ALB para o Frontend
resource "aws_lb" "toshiro_alb" {
  name               = "toshiro-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.toshiro_sg.id]
  subnets            = [aws_subnet.public_a.id, aws_subnet.public_b.id]
  
  tags = {
    Name = "toshiro-alb"
  }
}

resource "aws_lb_target_group" "toshiro_frontend_tg" {
  name     = "toshiro-frontend-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.toshiro_vpc.id
  
  health_check {
    path                = "/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }
}

resource "aws_lb_listener" "toshiro_frontend_listener" {
  load_balancer_arn = aws_lb.toshiro_alb.arn
  port              = 80
  protocol          = "HTTP"
  
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.toshiro_frontend_tg.arn
  }
}

# ECS Task Definition para o Frontend
resource "aws_ecs_task_definition" "toshiro_frontend_task" {
  family                   = "toshiro-frontend"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = "256"
  memory                   = "512"
  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn
  
  container_definitions = jsonencode([
    {
      name      = "toshiro-frontend"
      image     = "your-dockerhub-username/toshiro-frontend:latest"
      essential = true
      
      portMappings = [
        {
          containerPort = 80
          hostPort      = 80
          protocol      = "tcp"
        }
      ]
      
      logConfiguration = {
        logDriver = "awslogs"
        options = {
          "awslogs-group"         = "/ecs/toshiro-frontend"
          "awslogs-region"        = "us-east-1"
          "awslogs-stream-prefix" = "ecs"
        }
      }
    }
  ])
}

# ECS Service para o Frontend
resource "aws_ecs_service" "toshiro_frontend_service" {
  name            = "toshiro-frontend-service"
  cluster         = aws_ecs_cluster.toshiro_cluster.id
  task_definition = aws_ecs_task_definition.toshiro_frontend_task.arn
  desired_count   = 2
  launch_type     = "FARGATE"
  
  network_configuration {
    subnets          = [aws_subnet.public_a.id, aws_subnet.public_b.id]
    security_groups  = [aws_security_group.toshiro_sg.id]
    assign_public_ip = true
  }
  
  load_balancer {
    target_group_arn = aws_lb_target_group.toshiro_frontend_tg.arn
    container_name   = "toshiro-frontend"
    container_port   = 80
  }
  
  depends_on = [aws_lb_listener.toshiro_frontend_listener]
}

# Definições semelhantes para o Backend (resumido por brevidade)
resource "aws_lb_target_group" "toshiro_backend_tg" {
  name     = "toshiro-backend-tg"
  port     = 8080
  protocol = "HTTP"
  vpc_id   = aws_vpc.toshiro_vpc.id
  
  health_check {
    path                = "/health"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }
}

resource "aws_lb_listener" "toshiro_backend_listener" {
  load_balancer_arn = aws_lb.toshiro_alb.arn
  port              = 8080
  protocol          = "HTTP"
  
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.toshiro_backend_tg.arn
  }
}

# Output dos endpoints
output "frontend_url" {
  description = "URL do frontend"
  value       = "http://${aws_lb.toshiro_alb.dns_name}"
}

output "backend_url" {
  description = "URL da API backend"
  value       = "http://${aws_lb.toshiro_alb.dns_name}:8080"
}

output "database_endpoint" {
  description = "Endpoint do banco de dados"
  value       = aws_db_instance.toshiro_db.endpoint
  sensitive   = true
}